<!DOCTYPE html>
<html>
<head>
	<title>Twitter Mood Map</title>
	<meta charset="utf-8" />

	<meta name="viewport" content="width=device-width, initial-scale=1.0">

	<link rel="stylesheet" href="http://cdn.leafletjs.com/leaflet/v0.7.7/leaflet.css" />
	<script src="http://cdn.leafletjs.com/leaflet/v0.7.7/leaflet.js"></script>

	<style>
		#map {
			width: 900px;
			height: 600px;
		}

		.info {
			padding: 6px 8px;
			font: 14px/16px Arial, Helvetica, sans-serif;
			background: white;

			background: rgba(255,255,255,0.8);
			box-shadow: 0 0 15px rgba(0,0,0,0.2);
			border-radius: 5px;
		}
		.info h4 {
			margin: 0 0 5px;
			color: #777;
		}

		.legend {
			text-align: left;
			line-height: 18px;
			color: #555;
		}
		.legend i {
			width: 18px;
			height: 18px;
			float: left;
			margin-right: 8px;
			opacity: 0.7;
		}
	</style>
</head>
<body>
	<div id="map"></div>

	<script type="text/javascript" src="us-states-tweets.js"></script>
	<script type="text/javascript">
		// This is the coordinate for the US!

		var map = L.map('map').setView([37.8, -96], 4);

		L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token=pk.eyJ1Ijoid2VpeWlua28iLCJhIjoiY2locGFjZGpnMDN0enQ1bTJreXp3M21zNiJ9.929C4Qi49ear5wqJryXRsA', {
			maxZoom: 18,
			attribution: 'Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, ' +
				'<a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, ' +
				'Imagery Â© <a href="http://mapbox.com">Mapbox</a>',
			id: 'mapbox.light'
		}).addTo(map);

		L.geoJson(statesData).addTo(map);

		// change marker coordinates here to add a label!
		L.marker([39, -75]).addTo(map)
			.bindPopup("<b>Howdy!</b><br /> My opinion matters the most!").openPopup();

		// control that shows state info on hover, we can use these controls to see trends or w/e
		var info = L.control();

		info.onAdd = function (map) {
			this._div = L.DomUtil.create('div', 'info');
			this.update();
			return this._div;
		};

		info.update = function (props) {
			this._div.innerHTML = '<h4>US Search Comparison</h4>' +  (props ?
				'<b>' + props.name + '</b><br />' + props.tweets + ' search queries</sup>'
				: 'Hover over a state');
		};

		info.addTo(map);

		// This function gets the colors for the different states
		// Use colorbrewer for more interesting colors: http://colorbrewer2.org/
		var tweets = 666;
		function getColor(tweets) {
			return tweets > 100  ? '#d53e4f' :
 			       tweets > 50 ? '#f46d43' :
			       tweets > 20  ? '#fdae61' :
			       tweets > 10  ? '#fee08b' :
			       tweets > 0  ? '#ffffbf' :
			       tweets > -10  ? '#e6f598' :
			       tweets > -20   ? '#abdda4' :
			       tweets > -50   ? '#66c2a5' :
			       tweets > -100   ? '#3288bd' :
			                  '#FFEDA0';
		}

		function style(feature) {
			return {
				weight: 2,
				opacity: 1,
				color: 'white',
				dashArray: '3',
				fillOpacity: 0.7,
				//change the parameter of this line to get tweet trend
				fillColor: getColor(feature.properties.tweets)
			};
		}

		function highlightFeature(e) {
			var layer = e.target;

			layer.setStyle({
				weight: 5,
				color: '#666',
				dashArray: '',
				fillOpacity: 0.7
			});

			if (!L.Browser.ie && !L.Browser.opera) {
				layer.bringToFront();
			}

			info.update(layer.feature.properties);
		}

		var geojson;

		function resetHighlight(e) {
			geojson.resetStyle(e.target);
			info.update();
		}

		function zoomToFeature(e) {
			map.fitBounds(e.target.getBounds());
		}

		function onEachFeature(feature, layer) {
			layer.on({
				mouseover: highlightFeature,
				mouseout: resetHighlight,
				click: zoomToFeature
			});
		}


		// Change this to pass in data
		 geojson = L.geoJson(statesData, {
			style: style,
			onEachFeature: onEachFeature
		}).addTo(map);

		// map.attributionControl.addAttribution('Population data &copy; <a href="http://census.gov/">US Census Bureau</a>');


		var legend = L.control({position: 'bottomright'});
		//This function controls the legend
		//Need 3 search queries: Positive, Neutral, Negative 

		legend.onAdd = function (map) {

			var div = L.DomUtil.create('div', 'info legend'),
				grades = [0, 10, 20, 50, 100, 200, 500, 1000],
				labels = [],
				from, to;

			for (var i = 0; i < grades.length; i++) {
				from = grades[i];
				to = grades[i + 1];

				labels.push(
					'<i style="background:' + getColor(from + 1) + '"></i> ' +
					from + (to ? '&ndash;' + to : '+'));
			}

			div.innerHTML = labels.join('<br>');
			return div;
		};

		legend.addTo(map);


	</script>
</body>
</html>
